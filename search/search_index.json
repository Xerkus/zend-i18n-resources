{
    "docs": [
        {
            "location": "/",
            "text": "zend-i18n-resources\n\n\n\n\n\n\nThis \"component\" provides translation resources, specifically for \nzendframework/zend-validate\n and\n\nzendframework/zend-captcha\n, for use with \nzendframework/zend-i18n\n's Translator subcomponent.\n\n\n\n\nFile issues at https://github.com/zendframework/zend-i18n-resources/issues\n\n\nDocumentation is at https://docs.zendframework.com/zend-i18n-resources/\n\n\n\n\nInstallation\n\n\n$ composer require zendframework/zend-i18n-resources",
            "title": "zend-i18n-resources"
        },
        {
            "location": "/#zend-i18n-resources",
            "text": "This \"component\" provides translation resources, specifically for  zendframework/zend-validate  and zendframework/zend-captcha , for use with  zendframework/zend-i18n 's Translator subcomponent.   File issues at https://github.com/zendframework/zend-i18n-resources/issues  Documentation is at https://docs.zendframework.com/zend-i18n-resources/",
            "title": "zend-i18n-resources"
        },
        {
            "location": "/#installation",
            "text": "$ composer require zendframework/zend-i18n-resources",
            "title": "Installation"
        },
        {
            "location": "/usage/",
            "text": "Usage\n\n\nTo use the resources zend-i18n-resources exposes, retrieve them from the\n\nZend\\I18n\\Translator\\Resources\n class and pass them to\n\nZend\\I18n\\Translator\\Translator::addTranslationFilePattern()\n:\n\n\nuse Zend\\I18n\\Translator\\Resources;\nuse Zend\\I18n\\Translator\\Translator;\n\n$translator = new Translator();\n$translator->addTranslationFilePattern(\n    'phpArray',\n    Resources::getBasePath(),\n    Resources::getPatternForValidator()\n);\n\necho $translator->translate('Invalid type given. String expected', 'default', 'es');\n\n\n\nYou can also use the \ngetPatternForCaptcha()\n method to setup translation messages for\n\nzend-captcha\n:\n\n\n$translator->addTranslationFilePattern(\n    'phpArray',\n    Resources::getBasePath(),\n    Resources::getPatternForCaptcha()\n);\n\n\n\nAutomating resource injection\n\n\nIf you are fetching \nZend\\I18n\\Translator\\Translator\n via \nzend-servicemanager\n,\nyou may want to automate injecting the translation messages. This can be done\nusing \nzend-servicemanager\n's\n\ndelegator factories\n.\n\n\nAs an example, consider the following delegator factory:\n\n\nuse Interop\\Container\\ContainerInterface;\nuse Zend\\I18n\\Translator\\Resources;\nuse Zend\\ServiceManager\\DelegatorFactoryInterface;\nuse Zend\\ServiceManager\\ServiceLocatorInterface;\n\nclass TranslatorDelegator implements DelegatorFactoryInterface\n{\n    public function __invoke(\n        ContainerInterface $container,\n        $name,\n        callable $callback,\n        array $options = null\n    ) {\n        $translator = $callback();\n\n        $translator->addTranslationFilePattern(\n            'phpArray',\n            Resources::getBasePath(),\n            Resources::getPatternForValidator()\n        );\n        $translator->addTranslationFilePattern(\n            'phpArray',\n            Resources::getBasePath(),\n            Resources::getPatternForCaptcha()\n        );\n\n        return $translator;\n    }\n\n    public function createDelegatorWithName(\n        ServiceLocatorInterface $container,\n        $name,\n        $requestedName,\n        $callback\n    ) {\n        return $this($container, $requestedName, $callback);\n    }\n}\n\n\n\n\n\nForwards compatibility\n\n\nThe above definition will work with both zend-servicemanager v2 and v3\nreleases. If you are targeting only v3 and up, you can remove the\n\ncreateDelegatorWithName()\n implementation.\n\n\n\n\nYou would then register this in your configuration:\n\n\nreturn [\n    'service_manager' => [\n        'delegators' => [\n            'MvcTranslator' => [\n                'TranslatorDelegator',\n            ],\n        ],\n    ],\n];",
            "title": "Usage"
        },
        {
            "location": "/usage/#usage",
            "text": "To use the resources zend-i18n-resources exposes, retrieve them from the Zend\\I18n\\Translator\\Resources  class and pass them to Zend\\I18n\\Translator\\Translator::addTranslationFilePattern() :  use Zend\\I18n\\Translator\\Resources;\nuse Zend\\I18n\\Translator\\Translator;\n\n$translator = new Translator();\n$translator->addTranslationFilePattern(\n    'phpArray',\n    Resources::getBasePath(),\n    Resources::getPatternForValidator()\n);\n\necho $translator->translate('Invalid type given. String expected', 'default', 'es');  You can also use the  getPatternForCaptcha()  method to setup translation messages for zend-captcha :  $translator->addTranslationFilePattern(\n    'phpArray',\n    Resources::getBasePath(),\n    Resources::getPatternForCaptcha()\n);",
            "title": "Usage"
        },
        {
            "location": "/usage/#automating-resource-injection",
            "text": "If you are fetching  Zend\\I18n\\Translator\\Translator  via  zend-servicemanager ,\nyou may want to automate injecting the translation messages. This can be done\nusing  zend-servicemanager 's delegator factories .  As an example, consider the following delegator factory:  use Interop\\Container\\ContainerInterface;\nuse Zend\\I18n\\Translator\\Resources;\nuse Zend\\ServiceManager\\DelegatorFactoryInterface;\nuse Zend\\ServiceManager\\ServiceLocatorInterface;\n\nclass TranslatorDelegator implements DelegatorFactoryInterface\n{\n    public function __invoke(\n        ContainerInterface $container,\n        $name,\n        callable $callback,\n        array $options = null\n    ) {\n        $translator = $callback();\n\n        $translator->addTranslationFilePattern(\n            'phpArray',\n            Resources::getBasePath(),\n            Resources::getPatternForValidator()\n        );\n        $translator->addTranslationFilePattern(\n            'phpArray',\n            Resources::getBasePath(),\n            Resources::getPatternForCaptcha()\n        );\n\n        return $translator;\n    }\n\n    public function createDelegatorWithName(\n        ServiceLocatorInterface $container,\n        $name,\n        $requestedName,\n        $callback\n    ) {\n        return $this($container, $requestedName, $callback);\n    }\n}",
            "title": "Automating resource injection"
        },
        {
            "location": "/usage/#forwards-compatibility",
            "text": "The above definition will work with both zend-servicemanager v2 and v3\nreleases. If you are targeting only v3 and up, you can remove the createDelegatorWithName()  implementation.   You would then register this in your configuration:  return [\n    'service_manager' => [\n        'delegators' => [\n            'MvcTranslator' => [\n                'TranslatorDelegator',\n            ],\n        ],\n    ],\n];",
            "title": "Forwards compatibility"
        }
    ]
}